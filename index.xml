<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harth Programming Language</title>
    <link>http://www.harth-lang.org/</link>
    <description>Recent content on Harth Programming Language</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Feb 2016 19:00:00 -0800</lastBuildDate>
    
	<atom:link href="http://www.harth-lang.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Types, Traits and Classes</title>
      <link>http://www.harth-lang.org/blog/2016/03/21/types-traits-and-classes/</link>
      <pubDate>Mon, 21 Mar 2016 08:51:00 -0700</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/03/21/types-traits-and-classes/</guid>
      <description>Introduction Programming languages typically categorize data using the concept of Type. Even if a language has dynamic types or even a few simple data structures.
In this blog we&amp;rsquo;ll look at the probable design of the Type System for Harth:
 Type - which describe the relationships between types (sub-typing) and sets of functions that types allow. Trait - which usually provide function, method and property implementations, but no state.</description>
    </item>
    
    <item>
      <title>Names and Identities</title>
      <link>http://www.harth-lang.org/blog/2016/03/15/names-and-identities/</link>
      <pubDate>Tue, 15 Mar 2016 10:50:43 -0700</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/03/15/names-and-identities/</guid>
      <description>Introduction An important aspect of new programming languages and their design is Naming and Identities.
Essentially:
 How do we name our new language&amp;rsquo;s definitions (classes, functions, etc). How does the language uniquely identify these same things (classes, functions, etc).  Names Software Engineers, usually English speaking, typically use easy to remember and descriptive names for classes, functions and similar. There is a lot of variance in style and length, so our new language has to cope with this.</description>
    </item>
    
    <item>
      <title>Build Bridges, Not Walls</title>
      <link>http://www.harth-lang.org/blog/2016/03/02/build-bridges-not-walls/</link>
      <pubDate>Wed, 02 Mar 2016 12:09:53 -0800</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/03/02/build-bridges-not-walls/</guid>
      <description>Architecture Often in software archictecure you have a few large components that need to connect. In real-life this might be analagous to two different cities seperated by a river. Almost certainly we would have already have built a bridge between them to cross this natural boundary.
Fearful or foolish people might have built walls between them, but we&amp;rsquo;re not foolish.
Bridges In Real Life The city of Vancouver in British Columbia (where I live), there&amp;rsquo;s the Port Mann Bridge that connects Vancouver with the city of Surrey to the south.</description>
    </item>
    
    <item>
      <title>Syntax Ideas and Prototype Examples</title>
      <link>http://www.harth-lang.org/blog/2016/03/01/syntax-ideas-and-prototype-examples/</link>
      <pubDate>Tue, 01 Mar 2016 11:57:19 -0800</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/03/01/syntax-ideas-and-prototype-examples/</guid>
      <description>Familiar Programming Language with Fully Reified, Immutable, and Homoiconic code/data. Familiar The syntax and text of a Harth program should be familiar to most programmers.
Reified Reified means that all levels of the programming language model (text, lexical/tokens, AST, Semantic Model, Project, Binaries) are processed and available at run-time as ordinary data.
The data where possible immutable (or near enough).
Immutable Immutable data gives greater flexibility for shared state, caching, checksum, versioning, undo.</description>
    </item>
    
    <item>
      <title>Test Blog Page</title>
      <link>http://www.harth-lang.org/blog/2016/02/24/test-blog-page/</link>
      <pubDate>Wed, 24 Feb 2016 11:38:50 -0800</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/02/24/test-blog-page/</guid>
      <description>Reason This blog is a test page. It&amp;rsquo;s meant to test the Harth-Hugo-Theme.
Code Shortcode Example code block:
#include &amp;lt;iostream&amp;gt;#define IABS(x) ((x) &amp;lt; 0 ? -(x) : (x))  int main(int argc, char *argv[]) { /* An annoying &amp;#34;Hello World&amp;#34; example */ for (auto i = 0; i &amp;lt; 0xFFFF; i++) cout &amp;lt;&amp;lt; &amp;#34;Hello, World!&amp;#34; &amp;lt;&amp;lt; endl; char c = &amp;#39;\n&amp;#39;; unordered_map &amp;lt;string, vector&amp;lt;string&amp;gt; &amp;gt; m; m[&amp;#34;key&amp;#34;] = &amp;#34;\\\\&amp;#34;; // this is an error  return -2e3 + 12l; } classThing { public: Thing(); int CallFunc(int x, int y); }; try { Thing t; int x = t.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://www.harth-lang.org/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.harth-lang.org/license/</guid>
      <description>Content license All non-code blog content is licensed under Creative Commons BY-NC-SA.
Code license All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.
 Copyright 2016 Harvey Thompson
Licensed under the Apache License, Version 2.0 (the &amp;ldquo;License&amp;rdquo;); you may not use this file except in compliance with the License. You may obtain a copy of the License at</description>
    </item>
    
  </channel>
</rss>